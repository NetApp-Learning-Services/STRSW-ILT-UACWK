bundle:
  name: astracc
  version: 22.08.1-26
  releaseDate: 09/01/22
  packages:
  - packageName: acc
    packagePath: acc
    files:
    - filename: manifests/manifest.yaml
      contents: 
      mediaType: application/x-yaml
    - filename: manifests/astra_control_center.yaml
      contents: YXBpVmVyc2lvbjogYXN0cmEubmV0YXBwLmlvL3YxCmtpbmQ6IEFzdHJhQ29udHJvbENlbnRlcgptZXRhZGF0YToKICBuYW1lOiBhc3RyYQpzcGVjOgogIGFjY291bnROYW1lOiAiRXhhbXBsZSIKICBhc3RyYVZlcnNpb246ICIyMi4wOC4xLTI2IgogIGFzdHJhQWRkcmVzczogImFzdHJhLmV4YW1wbGUuY29tIgogICMgYXN0cmFLdWJlQ29uZmlnU2VjcmV0IGlzIHNldCB0byBuYW1lIG9mIHRoZSBzZWNyZXQgd2hpY2ggY29udGFpbnMga3ViZWNvbmZpZyBvZiB0aGUgQUNDIGNsdXN0ZXIKICAjIHNlY3JldCBuZWVkcyB0byBiZSBjcmVhdGVkIHByaW9yIHRvIGRlcGxveWluZyBBQ0MgaWYgeW91IHdhbnQgaXQgdG8gYmUgbWFuYWdlZCBieSBBc3RyYQogICMgYXN0cmFLdWJlQ29uZmlnU2VjcmV0OiAiYWNjLWt1YmVjb25maWctY3JlZCIKICBhdXRvU3VwcG9ydDoKICAgIGVucm9sbGVkOiB0cnVlCiAgZW1haWw6ICJhZG1pbkBleGFtcGxlLmNvbSIKICBmaXJzdE5hbWU6ICJTUkUiCiAgbGFzdE5hbWU6ICJBZG1pbiIKICBpbWFnZVJlZ2lzdHJ5OgogICAgbmFtZTogImV4YW1wbGUucmVnaXN0cnkvYXN0cmEiCiAgICBzZWNyZXQ6ICJhc3RyYS1yZWdpc3RyeS1jcmVkIgogIHN0b3JhZ2VDbGFzczogIm9udGFwLWdvbGQiCiAgdm9sdW1lUmVjbGFpbVBvbGljeTogIlJldGFpbiIgIAogIGluZ3Jlc3NUeXBlOiAiR2VuZXJpYyIgIAogIGFzdHJhUmVzb3VyY2VzU2NhbGVyOiAiRGVmYXVsdCIKICBhZGRpdGlvbmFsVmFsdWVzOiB7fQogIGNyZHM6CiAgICBleHRlcm5hbFRyYWVmaWs6IGZhbHNlCiAgICBleHRlcm5hbENlcnRNYW5hZ2VyOiBmYWxzZQogIGF2cERlcGxveTogZmFsc2UK
      mediaType: application/x-yaml
    - filename: manifests/astra_control_center_min.yaml
      contents: YXBpVmVyc2lvbjogYXN0cmEubmV0YXBwLmlvL3YxCmtpbmQ6IEFzdHJhQ29udHJvbENlbnRlcgptZXRhZGF0YToKICBuYW1lOiBhc3RyYSAKc3BlYzoKICBhY2NvdW50TmFtZTogIkV4YW1wbGUiCiAgYXN0cmFWZXJzaW9uOiAiMjIuMDguMS0yNiIKICBhc3RyYUFkZHJlc3M6ICJhc3RyYS5leGFtcGxlLmNvbSIKICAjIGFzdHJhS3ViZUNvbmZpZ1NlY3JldCBpcyBzZXQgdG8gbmFtZSBvZiB0aGUgc2VjcmV0IHdoaWNoIGNvbnRhaW5zIGt1YmVjb25maWcgb2YgdGhlIEFDQyBjbHVzdGVyCiAgIyBzZWNyZXQgbmVlZHMgdG8gYmUgY3JlYXRlZCBwcmlvciB0byBkZXBsb3lpbmcgQUNDIGlmIHlvdSB3YW50IGl0IHRvIGJlIG1hbmFnZWQgYnkgQXN0cmEKICAjIGFzdHJhS3ViZUNvbmZpZ1NlY3JldDogImFjYy1rdWJlY29uZmlnLWNyZWQiCiAgYXV0b1N1cHBvcnQ6CiAgICBlbnJvbGxlZDogdHJ1ZQogIGVtYWlsOiAiYWRtaW5AZXhhbXBsZS5jb20iCiAgZmlyc3ROYW1lOiAiU1JFIgogIGxhc3ROYW1lOiAiQWRtaW4iCiAgaW1hZ2VSZWdpc3RyeToKICAgIG5hbWU6ICJleGFtcGxlLnJlZ2lzdHJ5L2FzdHJhIgogICAgc2VjcmV0OiAiYXN0cmEtcmVnaXN0cnktY3JlZCIK
      mediaType: application/x-yaml
    - filename: manifests/astra_control_center_operator_deploy.yaml
      contents: 
      mediaType: application/x-yaml
    - filename: manifests/astra_control_center_operator_deploy_with_validations.yaml
      contents: YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcC5uZXRhcHAuaW8vbWFuYWdlZC1ieTogYXN0cmEubmV0YXBwLmlvCiAgICBjb250cm9sLXBsYW5lOiBjb250cm9sbGVyLW1hbmFnZXIKICBuYW1lOiBuZXRhcHAtYWNjLW9wZXJhdG9yCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgYW5ub3RhdGlvbnM6CiAgICBjZXJ0LW1hbmFnZXIuaW8vaW5qZWN0LWNhLWZyb206IG5ldGFwcC1hY2Mtb3BlcmF0b3IvYWNjLW9wZXJhdG9yLXNlcnZpbmctY2VydAogICAgY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbjogdjAuNC4xCiAgbmFtZTogYXN0cmFjb250cm9sY2VudGVycy5hc3RyYS5uZXRhcHAuaW8Kc3BlYzoKICBncm91cDogYXN0cmEubmV0YXBwLmlvCiAgbmFtZXM6CiAgICBraW5kOiBBc3RyYUNvbnRyb2xDZW50ZXIKICAgIGxpc3RLaW5kOiBBc3RyYUNvbnRyb2xDZW50ZXJMaXN0CiAgICBwbHVyYWw6IGFzdHJhY29udHJvbGNlbnRlcnMKICAgIHNob3J0TmFtZXM6CiAgICAtIGFjYwogICAgc2luZ3VsYXI6IGFzdHJhY29udHJvbGNlbnRlcgogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbnM6CiAgLSBhZGRpdGlvbmFsUHJpbnRlckNvbHVtbnM6CiAgICAtIGpzb25QYXRoOiAubWV0YWRhdGEudWlkCiAgICAgIG5hbWU6IFV1aWQKICAgICAgdHlwZTogc3RyaW5nCiAgICAtIGpzb25QYXRoOiAuc3BlYy5hc3RyYVZlcnNpb24KICAgICAgbmFtZTogVmVyc2lvbgogICAgICB0eXBlOiBzdHJpbmcKICAgIC0ganNvblBhdGg6IC5zcGVjLmFzdHJhQWRkcmVzcwogICAgICBuYW1lOiBBZGRyZXNzCiAgICAgIHR5cGU6IHN0cmluZwogICAgLSBqc29uUGF0aDogLnN0YXR1cy5jb25kaXRpb25zWz8oQC50eXBlPT0iUmVhZHkiKV0uc3RhdHVzCiAgICAgIG5hbWU6IFJlYWR5CiAgICAgIHR5cGU6IHN0cmluZwogICAgbmFtZTogdjEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUNvbnRyb2xDZW50ZXIgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGFzdHJhY29udHJvbGNlbnRlcnMKICAgICAgICAgIEFQSQogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uCiAgICAgICAgICAgICAgb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0CiAgICAgICAgICAgICAgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzJwogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGtpbmQ6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcwogICAgICAgICAgICAgIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQKICAgICAgICAgICAgICBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzJwogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUNvbnRyb2xDZW50ZXJTcGVjIGRlZmluZXMgcGFyYW1ldGVycyB0aGUgYWRtaW5pc3RyYXRvcgogICAgICAgICAgICAgIGNhbiB1c2UgdG8gYWRhcHQgQUNDIHRvIHRoZWlyIGRhdGFjZW50ZXIgZW52aXJvbm1lbnQuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYWNjb3VudE5hbWU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQXN0cmEgQ29udHJvbCBDZW50ZXIgYWNjb3VudCBuYW1lCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBhZGRpdGlvbmFsVmFsdWVzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFkZGl0aW9uYWwgdmFsdWVzIHRvIGFwcGx5IHRvIHRoZSBBc3RyYUNvbnRyb2xDZW50ZXIKICAgICAgICAgICAgICAgICAgZGVwbG95bWVudC4KICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkczogdHJ1ZQogICAgICAgICAgICAgIGFzdHJhQWRkcmVzczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUFkZHJlc3MgZGVmaW5lcyBob3cgQXN0cmEgd2lsbCBiZSBmb3VuZCBpbiB0aGUgZGF0YQogICAgICAgICAgICAgICAgICBjZW50ZXIuICBUaGlzIElQIGFkZHJlc3MgYW5kL29yIEROUyBBIHJlY29yZCBtdXN0IGJlIGNyZWF0ZWQgcHJpb3IKICAgICAgICAgICAgICAgICAgdG8gcHJvdmlzaW9uaW5nIEFzdHJhIENvbnRyb2wgQ2VudGVyLiBFeGFtcGxlIC0gImFzdHJhLmV4YW1wbGUuY29tIgogICAgICAgICAgICAgICAgICBUaGUgQSByZWNvcmQgYW5kIGl0cyBJUCBhZGRyZXNzIG11c3QgYmUgYWxsb2NhdGVkIHByaW9yIHRvIHByb3Zpc2lvbmluZwogICAgICAgICAgICAgICAgICBBc3RyYSBDb250cm9sIENlbnRlcgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYXN0cmFLdWJlQ29uZmlnU2VjcmV0OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFzdHJhS3ViZUNvbmZpZ1NlY3JldCBpZiBwcmVzZW50IGFuZCBzZWNyZXQgZXhpc3RzIG9wZXJhdG9yCiAgICAgICAgICAgICAgICAgIHdpbGwgYXR0ZW1wdCB0byBhZGQgS3ViZUNvbmZpZyB0byBNYW5hZ2VkIENsdXN0ZXJzLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYXN0cmFSZXNvdXJjZXNTY2FsZXI6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2NhbGluZyBvcHRpb25zIGZvciBBc3RyYUNvbnRyb2xDZW50ZXIgUmVzb3VyY2UgbGltaXRzLgogICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgIC0gIk9mZiIKICAgICAgICAgICAgICAgIC0gRGVmYXVsdAogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYXN0cmFWZXJzaW9uOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFZlcnNpb24gb2YgQXN0cmFDb250cm9sQ2VudGVyIHRvIGRlcGxveS4gIFlvdSBhcmUgcHJvdmlkZWQKICAgICAgICAgICAgICAgICAgYSBIZWxtIHJlcG9zaXRvcnkgd2l0aCBhIGNvcnJlc3BvbmRpbmcgdmVyc2lvbi4gRXhhbXBsZSAtIDEuNS4yLAogICAgICAgICAgICAgICAgICAxLjQuMi1wYXRjaAogICAgICAgICAgICAgICAgcGF0dGVybjogKFxkKlwuXGQqXC5cZCooLS4qKT8pfFxkKy0uKgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYXV0b1N1cHBvcnQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQXV0b1N1cHBvcnQgaW5kaWNhdGVzIHdpbGxpbmduZXNzIHRvIHBhcnRpY2lwYXRlIGluIE5ldEFwcCdzCiAgICAgICAgICAgICAgICAgIHByb2FjdGl2ZSBzdXBwb3J0IGFwcGxpY2F0aW9uLCBOZXRBcHAgQWN0aXZlIElRLiBBbiBpbnRlcm5ldCBjb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgIGlzIHJlcXVpcmVkIChwb3J0IDQ0MikgYW5kIGFsbCBzdXBwb3J0IGRhdGEgaXMgYW5vbnltaXplZC4gVGhlIGRlZmF1bHQKICAgICAgICAgICAgICAgICAgZWxlY3Rpb24gaXMgdHJ1ZSBhbmQgaW5kaWNhdGVzIG5vIHN1cHBvcnQgZGF0YSB3aWxsIGJlIHNlbnQgdG8gTmV0QXBwLgogICAgICAgICAgICAgICAgICBBbiBlbXB0eSBvciBibGFuayBlbGVjdGlvbiBpcyB0aGUgc2FtZSBhcyBhIGRlZmF1bHQgZWxlY3Rpb24uIEFpcgogICAgICAgICAgICAgICAgICBnYXBwZWQgaW5zdGFsbGF0aW9ucyBzaG91bGQgZW50ZXIgZmFsc2UuCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBlbnJvbGxlZDoKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEVucm9sbGVkIGRldGVybWluZXMgaWYgeW91IHdhbnQgdG8gc2VuZCBhbm9ueW1vdXMKICAgICAgICAgICAgICAgICAgICAgIGRhdGEgdG8gTmV0QXBwIGZvciBzdXBwb3J0IHB1cnBvc2VzLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgdXJsOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGh0dHBzOi8vc3VwcG9ydC5uZXRhcHAuY29tL2FzdXBwcm9kL3Bvc3QvMS4wL3Bvc3RBc3VwCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFVSTCBkZXRlcm1pbmVzIHdoZXJlIHRoZSBhbm9ueW1vdXMgZGF0YSB3aWxsIGJlIHNlbnQKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgLSBlbnJvbGxlZAogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgYXZwRGVwbG95OgogICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnT3B0aW9uIHRvIGFsbG93IHVzZXIgdG8gZGlzYWJsZSBkZXBsb3ltZW50IG9mIEFWUCBvcGVyYXRvcgogICAgICAgICAgICAgICAgICBOb3RlOiBBVlAgT3BlcmF0b3IgaXMgbm90IGRlcGxveWVkIGJ5IGRlZmF1bHQuJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGNyZHM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogT3B0aW9ucyBmb3IgaG93IEFDQyBzaG91bGQgaGFuZGxlIENSRHMuT3B0aW9ucyBmb3IgaG93CiAgICAgICAgICAgICAgICAgIEFDQyBzaG91bGQgaGFuZGxlIENSRHMuCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBleHRlcm5hbENlcnRNYW5hZ2VyOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBCeSBkZWZhdWx0LCBBQ0Mgd2lsbCBpbnN0YWxsIHRoZSByZXF1aXJlZCBjZXJ0LW1hbmFnZXIKICAgICAgICAgICAgICAgICAgICAgIENSRHMuIE5vdGUsIENSRHMgYXJlIGEgY2x1c3RlciB3aWRlIG9iamVjdCBhbmQgaW5zdGFsbGluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgICBtYXkgaGF2ZSBhbiBpbXBhY3Qgb24gb3RoZXIgcGFydHMgb2YgdGhlIGNsdXN0ZXIuIFlvdSBjYW4gdXNlCiAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZsYWcgdG8gc2lnbmFsIHRvIEFDQyB0aGF0IHRoZXNlIENSRHMgd2lsbCBiZSBpbnN0YWxsZWQKICAgICAgICAgICAgICAgICAgICAgIGFuZCBtYW5hZ2VkIGJ5IHRoZSBjbHVzdGVyIGFkbWluaXN0cmF0b3Igb3V0c2lkZSBvZiBBQ0MuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICBleHRlcm5hbFRyYWVmaWs6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEJ5IGRlZmF1bHQsIEFDQyB3aWxsIGluc3RhbGwgdGhlIHJlcXVpcmVkIFRyYWVmaWsKICAgICAgICAgICAgICAgICAgICAgIENSRHMuIE5vdGUsIENSRHMgYXJlIGEgY2x1c3RlciB3aWRlIG9iamVjdCBhbmQgaW5zdGFsbGluZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgICBtYXkgaGF2ZSBhbiBpbXBhY3Qgb24gb3RoZXIgcGFydHMgb2YgdGhlIGNsdXN0ZXIuIFlvdSBjYW4gdXNlCiAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZsYWcgdG8gc2lnbmFsIHRvIEFDQyB0aGF0IHRoZXNlIENSRHMgd2lsbCBiZSBpbnN0YWxsZWQKICAgICAgICAgICAgICAgICAgICAgIGFuZCBtYW5hZ2VkIGJ5IHRoZSBjbHVzdGVyIGFkbWluaXN0cmF0b3Igb3V0c2lkZSBvZiBBQ0MuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICBzaG91bGRVcGdyYWRlOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXRlcm1pbmVzIGlmIENSRHMgc2hvdWxkIGJlIHVwZ3JhZGVkIHdoZW4gQUNDIGlzCiAgICAgICAgICAgICAgICAgICAgICB1cGdyYWRlZC4gSWYgdHJ1ZSwgYWxsIGV4dGVybmFsIENSRHMgd2lsbCBiZSB1cGdyYWRlZCBJZiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHRoZXkgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBBQ0MgdXBncmFkZSBwcm9jZXNzLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIGVtYWlsOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEVtYWlsQWRkcmVzcyB3aWxsIGJlIG5vdGlmaWVkIGJ5IEFzdHJhIGFzIGV2ZW50cyB3YXJyYW50LgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZmlyc3ROYW1lOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBmaXJzdCBuYW1lIG9mIHRoZSBTUkUgc3VwcG9ydGluZyBBc3RyYS4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGltYWdlUmVnaXN0cnk6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGNvbnRhaW5lciBpbWFnZSByZWdpc3RyeSB0aGF0IGlzIGhvc3RpbmcgdGhlIEFzdHJhCiAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uIGltYWdlcywgQUNDIE9wZXJhdG9yIGFuZCBBQ0MgSGVsbSBSZXBvc2l0b3J5LgogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG5hbWUgb2YgdGhlIGltYWdlIHJlZ2lzdHJ5LiAgRm9yIGV4YW1wbGUgImV4YW1wbGUucmVnaXN0cnkvYXN0cmEiLiAgRG8KICAgICAgICAgICAgICAgICAgICAgIG5vdCBwcmVmaXggd2l0aCBwcm90b2NvbC4KICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgc2VjcmV0OgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbmFtZSBvZiB0aGUgS3ViZXJuZXRlcyBzZWNyZXQgdGhhdCB3aWxsIGF1dGhlbnRpY2F0ZQogICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgaW1hZ2UgcmVnaXN0cnkuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBpbmdyZXNzVHlwZToKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IEdlbmVyaWMKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJbmdyZXNzVHlwZSBUaGUgdHlwZSBvZiBpbmdyZXNzIHRvIHRoYXQgQUNDIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICBjb25maWd1cmVkIGZvcgogICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgIC0gR2VuZXJpYwogICAgICAgICAgICAgICAgLSBBY2NUcmFlZmlrCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBsYXN0TmFtZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbGFzdCBuYW1lIG9mIHRoZSBTUkUgc3VwcG9ydGluZyBBc3RyYS4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIG10bHM6CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICBjZXJ0RHVyYXRpb246IDIxNDBoCiAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPcHRpb25zIGZvciBob3cgQUNDIHNob3VsZCBpbXBsZW1lbnQgc2VydmljZSB0byBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgIG1UTFMgaW4gdGhlIGNsdXN0ZXIuCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBjZXJ0RHVyYXRpb246CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogMjE0MGgKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGR1cmF0aW9uIG9mIHRpbWUgaW4gaG91cnMgdG8gdXNlIGFzIGEgbGlmZXNwYW4KICAgICAgICAgICAgICAgICAgICAgIHdoZW4gaXNzdWluZyBzZXJ2aWNlIFRMUyBjZXJ0aWZpY2F0ZXMuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZQogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBCeSBkZWZhdWx0LCBBQ0Mgd2lsbCB1c2UgbVRMUyBmb3Igc2VydmljZSB0byBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICBjb21tdW5pY2F0aW9uLiBUaGlzIHNob3VsZCBiZSBkaXNhYmxlZCB3aGVuIHVzaW5nIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgbWVzaCB0byBlbmNyeXB0IHNlcnZpY2UgdG8gc2VydmljZSBjb21tdW5pY2F0aW9uIGluc3RlYWQuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgc3RvcmFnZUNsYXNzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBzdG9yYWdlIGNsYXNzIHRvIGJlIHVzZWQgZm9yIFBWQ3MuIElmIG5vdCBzZXQsIGRlZmF1bHQKICAgICAgICAgICAgICAgICAgc3RvcmFnZSBjbGFzcyB3aWxsIGJlIHVzZWQuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICB2b2x1bWVSZWNsYWltUG9saWN5OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFJlY2xhaW0gcG9saWN5IHRvIGJlIHNldCBmb3IgcGVyc2lzdGVudCB2b2x1bWVzCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gYWNjb3VudE5hbWUKICAgICAgICAgICAgLSBhc3RyYUFkZHJlc3MKICAgICAgICAgICAgLSBhc3RyYVZlcnNpb24KICAgICAgICAgICAgLSBhdXRvU3VwcG9ydAogICAgICAgICAgICAtIGVtYWlsCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3RhdHVzOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogQXN0cmFDb250cm9sQ2VudGVyU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEFzdHJhQ29udHJvbENlbnRlcgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGFjY0NvbmRpdGlvbkhpc3Rvcnk6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQWNjQ29uZGl0aW9uSGlzdG9yeSBjb250YWlucyB0aGUgaGlzdG9yeSBvZiB0aGUgZGVwbG95bWVudAogICAgICAgICAgICAgICAgICBzdGF0ZSBvZiB0aGUgQXN0cmEgQ29udHJvbCBDZW50ZXIgSW5zdGFuY2UuCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFzdHJhVmVyc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiQ29uZGl0aW9uIGNvbnRhaW5zIGRldGFpbHMgZm9yIG9uZSBhc3BlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoaXMgQVBJIFJlc291cmNlLiAtLS0gVGhpcyBzdHJ1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGludGVuZGVkIGZvciBkaXJlY3QgdXNlIGFzIGFuIGFycmF5IGF0IHRoZSBmaWVsZCBwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3RhdHVzLmNvbmRpdGlvbnMuICBGb3IgZXhhbXBsZSwgdHlwZSBGb29TdGF0dXMgc3RydWN0ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgXCAgICAvLyBSZXByZXNlbnRzIHRoZSBvYnNlcnZhdGlvbnMgb2YgYSBmb28ncyBjdXJyZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS4gICAgIC8vIEtub3duIC5zdGF0dXMuY29uZGl0aW9ucy50eXBlIGFyZTogXCJBdmFpbGFibGVcIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJvZ3Jlc3NpbmdcIiwgYW5kIFwiRGVncmFkZWRcIiAgICAgLy8gK3BhdGNoTWVyZ2VLZXk9dHlwZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXCAgICAvLyArcGF0Y2hTdHJhdGVneT1tZXJnZSAgICAgLy8gK2xpc3RUeXBlPW1hcCAgICAgLy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICtsaXN0TWFwS2V5PXR5cGUgICAgIENvbmRpdGlvbnMgW11tZXRhdjEuQ29uZGl0aW9uIGBqc29uOlwiY29uZGl0aW9ucyxvbWl0ZW1wdHlcIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hTdHJhdGVneTpcIm1lcmdlXCIgcGF0Y2hNZXJnZUtleTpcInR5cGVcIiBwcm90b2J1ZjpcImJ5dGVzLDEscmVwLG5hbWU9Y29uZGl0aW9uc1wiYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgIC8vIG90aGVyIGZpZWxkcyB9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VHJhbnNpdGlvblRpbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBsYXN0VHJhbnNpdGlvblRpbWUgaXMgdGhlIGxhc3QgdGltZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gdHJhbnNpdGlvbmVkIGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgc2hvdWxkIGJlIHdoZW4gdGhlIHVuZGVybHlpbmcgY29uZGl0aW9uIGNoYW5nZWQuICBJZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgbm90IGtub3duLCB0aGVuIHVzaW5nIHRoZSB0aW1lIHdoZW4gdGhlIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkIGNoYW5nZWQgaXMgYWNjZXB0YWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbWVzc2FnZSBpcyBhIGh1bWFuIHJlYWRhYmxlIG1lc3NhZ2UgaW5kaWNhdGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHMgYWJvdXQgdGhlIHRyYW5zaXRpb24uIFRoaXMgbWF5IGJlIGFuIGVtcHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IDMyNzY4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWRHZW5lcmF0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2JzZXJ2ZWRHZW5lcmF0aW9uIHJlcHJlc2VudHMgdGhlIC5tZXRhZGF0YS5nZW5lcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgY29uZGl0aW9uIHdhcyBzZXQgYmFzZWQgdXBvbi4gRm9yIGluc3RhbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIC5tZXRhZGF0YS5nZW5lcmF0aW9uIGlzIGN1cnJlbnRseSAxMiwgYnV0IHRoZSAuc3RhdHVzLmNvbmRpdGlvbnNbeF0ub2JzZXJ2ZWRHZW5lcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgOSwgdGhlIGNvbmRpdGlvbiBpcyBvdXQgb2YgZGF0ZSB3aXRoIHJlc3BlY3QgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaW5zdGFuY2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogaW50NjQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWFzb24gY29udGFpbnMgYSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRpbmcgdGhlIHJlYXNvbiBmb3IgdGhlIGNvbmRpdGlvbidzIGxhc3QgdHJhbnNpdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9kdWNlcnMgb2Ygc3BlY2lmaWMgY29uZGl0aW9uIHR5cGVzIG1heSBkZWZpbmUgZXhwZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgYW5kIG1lYW5pbmdzIGZvciB0aGlzIGZpZWxkLCBhbmQgd2hldGhlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgYSBndWFyYW50ZWVkIEFQSS4gVGhlIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGEgQ2FtZWxDYXNlIHN0cmluZy4gVGhpcyBmaWVsZCBtYXkgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExlbmd0aDogMTAyNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXltBLVphLXpdKFtBLVphLXowLTlfLDpdKltBLVphLXowLTlfXSk/JAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0YXR1cyBvZiB0aGUgY29uZGl0aW9uLCBvbmUgb2YgVHJ1ZSwgRmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVW5rbm93bi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAiVHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAiRmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gVW5rbm93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0eXBlIG9mIGNvbmRpdGlvbiBpbiBDYW1lbENhc2Ugb3IgaW4gZm9vLmV4YW1wbGUuY29tL0NhbWVsQ2FzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0gTWFueSAuY29uZGl0aW9uLnR5cGUgdmFsdWVzIGFyZSBjb25zaXN0ZW50IGFjcm9zcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlcyBsaWtlIEF2YWlsYWJsZSwgYnV0IGJlY2F1c2UgYXJiaXRyYXJ5IGNvbmRpdGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW4gYmUgdXNlZnVsIChzZWUgLm5vZGUuc3RhdHVzLmNvbmRpdGlvbnMpLCB0aGUgYWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGRlY29uZmxpY3QgaXMgaW1wb3J0YW50LiBUaGUgcmVnZXggaXQgbWF0Y2hlcyBpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkbnMxMTIzU3ViZG9tYWluRm10Lyk/KHF1YWxpZmllZE5hbWVGbXQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExlbmd0aDogMzE2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4oW2EtejAtOV0oWy1hLXowLTldKlthLXowLTldKT8oXC5bYS16MC05XShbLWEtejAtOV0qW2EtejAtOV0pPykqLyk/KChbQS1aYS16MC05XVstQS1aYS16MC05Xy5dKik/W0EtWmEtejAtOV0pJAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGxhc3RUcmFuc2l0aW9uVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gbWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gcmVhc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgLSBzdGF0dXMKICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IGludDY0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlZEdlbmVyYXRpb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWRTcGVjOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUNvbnRyb2xDZW50ZXJTcGVjIGRlZmluZXMgcGFyYW1ldGVycyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0b3IgY2FuIHVzZSB0byBhZGFwdCBBQ0MgdG8gdGhlaXIgZGF0YWNlbnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnROYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQXN0cmEgQ29udHJvbCBDZW50ZXIgYWNjb3VudCBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFZhbHVlczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFkZGl0aW9uYWwgdmFsdWVzIHRvIGFwcGx5IHRvIHRoZSBBc3RyYUNvbnRyb2xDZW50ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHM6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzdHJhQWRkcmVzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFzdHJhQWRkcmVzcyBkZWZpbmVzIGhvdyBBc3RyYSB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgaW4gdGhlIGRhdGEgY2VudGVyLiAgVGhpcyBJUCBhZGRyZXNzIGFuZC9vcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEROUyBBIHJlY29yZCBtdXN0IGJlIGNyZWF0ZWQgcHJpb3IgdG8gcHJvdmlzaW9uaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXN0cmEgQ29udHJvbCBDZW50ZXIuIEV4YW1wbGUgLSAiYXN0cmEuZXhhbXBsZS5jb20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIEEgcmVjb3JkIGFuZCBpdHMgSVAgYWRkcmVzcyBtdXN0IGJlIGFsbG9jYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yIHRvIHByb3Zpc2lvbmluZyBBc3RyYSBDb250cm9sIENlbnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzdHJhS3ViZUNvbmZpZ1NlY3JldDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFzdHJhS3ViZUNvbmZpZ1NlY3JldCBpZiBwcmVzZW50IGFuZCBzZWNyZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgb3BlcmF0b3Igd2lsbCBhdHRlbXB0IHRvIGFkZCBLdWJlQ29uZmlnIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFuYWdlZCBDbHVzdGVycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3RyYVJlc291cmNlc1NjYWxlcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNjYWxpbmcgb3B0aW9ucyBmb3IgQXN0cmFDb250cm9sQ2VudGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzb3VyY2UgbGltaXRzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICJPZmYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gRGVmYXVsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzdHJhVmVyc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFZlcnNpb24gb2YgQXN0cmFDb250cm9sQ2VudGVyIHRvIGRlcGxveS4gIFlvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBwcm92aWRlZCBhIEhlbG0gcmVwb3NpdG9yeSB3aXRoIGEgY29ycmVzcG9uZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24uIEV4YW1wbGUgLSAxLjUuMiwgMS40LjItcGF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogKFxkKlwuXGQqXC5cZCooLS4qKT8pfFxkKy0uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9TdXBwb3J0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQXV0b1N1cHBvcnQgaW5kaWNhdGVzIHdpbGxpbmduZXNzIHRvIHBhcnRpY2lwYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gTmV0QXBwJ3MgcHJvYWN0aXZlIHN1cHBvcnQgYXBwbGljYXRpb24sIE5ldEFwcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGl2ZSBJUS4gQW4gaW50ZXJuZXQgY29ubmVjdGlvbiBpcyByZXF1aXJlZCAocG9ydAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ0MikgYW5kIGFsbCBzdXBwb3J0IGRhdGEgaXMgYW5vbnltaXplZC4gVGhlIGRlZmF1bHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVjdGlvbiBpcyB0cnVlIGFuZCBpbmRpY2F0ZXMgbm8gc3VwcG9ydCBkYXRhIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBzZW50IHRvIE5ldEFwcC4gQW4gZW1wdHkgb3IgYmxhbmsgZWxlY3Rpb24gaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBhcyBhIGRlZmF1bHQgZWxlY3Rpb24uIEFpciBnYXBwZWQgaW5zdGFsbGF0aW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBlbnRlciBmYWxzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnJvbGxlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFbnJvbGxlZCBkZXRlcm1pbmVzIGlmIHlvdSB3YW50IHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQgYW5vbnltb3VzIGRhdGEgdG8gTmV0QXBwIGZvciBzdXBwb3J0IHB1cnBvc2VzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGh0dHBzOi8vc3VwcG9ydC5uZXRhcHAuY29tL2FzdXBwcm9kL3Bvc3QvMS4wL3Bvc3RBc3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVVJMIGRldGVybWluZXMgd2hlcmUgdGhlIGFub255bW91cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhIHdpbGwgYmUgc2VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIGVucm9sbGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZwRGVwbG95OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ09wdGlvbiB0byBhbGxvdyB1c2VyIHRvIGRpc2FibGUgZGVwbG95bWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIEFWUCBvcGVyYXRvciBOb3RlOiBBVlAgT3BlcmF0b3IgaXMgbm90IGRlcGxveWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgZGVmYXVsdC4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPcHRpb25zIGZvciBob3cgQUNDIHNob3VsZCBoYW5kbGUgQ1JEcy5PcHRpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGhvdyBBQ0Mgc2hvdWxkIGhhbmRsZSBDUkRzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsQ2VydE1hbmFnZXI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQnkgZGVmYXVsdCwgQUNDIHdpbGwgaW5zdGFsbCB0aGUgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VydC1tYW5hZ2VyIENSRHMuIE5vdGUsIENSRHMgYXJlIGEgY2x1c3RlciB3aWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCBhbmQgaW5zdGFsbGluZyB0aGVtIG1heSBoYXZlIGFuIGltcGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBvdGhlciBwYXJ0cyBvZiB0aGUgY2x1c3Rlci4gWW91IGNhbiB1c2UgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnIHRvIHNpZ25hbCB0byBBQ0MgdGhhdCB0aGVzZSBDUkRzIHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIGFuZCBtYW5hZ2VkIGJ5IHRoZSBjbHVzdGVyIGFkbWluaXN0cmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0c2lkZSBvZiBBQ0MuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxUcmFlZmlrOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEJ5IGRlZmF1bHQsIEFDQyB3aWxsIGluc3RhbGwgdGhlIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYWVmaWsgQ1JEcy4gTm90ZSwgQ1JEcyBhcmUgYSBjbHVzdGVyIHdpZGUgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBpbnN0YWxsaW5nIHRoZW0gbWF5IGhhdmUgYW4gaW1wYWN0IG9uIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzIG9mIHRoZSBjbHVzdGVyLiBZb3UgY2FuIHVzZSB0aGlzIGZsYWcgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsIHRvIEFDQyB0aGF0IHRoZXNlIENSRHMgd2lsbCBiZSBpbnN0YWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG1hbmFnZWQgYnkgdGhlIGNsdXN0ZXIgYWRtaW5pc3RyYXRvciBvdXRzaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIEFDQy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRVcGdyYWRlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERldGVybWluZXMgaWYgQ1JEcyBzaG91bGQgYmUgdXBncmFkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBBQ0MgaXMgdXBncmFkZWQuIElmIHRydWUsIGFsbCBleHRlcm5hbCBDUkRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdXBncmFkZWQgSWYgZmFsc2UsIHRoZXkgd2lsbCBiZSBpZ25vcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmluZyBBQ0MgdXBncmFkZSBwcm9jZXNzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRW1haWxBZGRyZXNzIHdpbGwgYmUgbm90aWZpZWQgYnkgQXN0cmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBldmVudHMgd2FycmFudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgZmlyc3QgbmFtZSBvZiB0aGUgU1JFIHN1cHBvcnRpbmcgQXN0cmEuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VSZWdpc3RyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBjb250YWluZXIgaW1hZ2UgcmVnaXN0cnkgdGhhdCBpcyBob3N0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEFzdHJhIGFwcGxpY2F0aW9uIGltYWdlcywgQUNDIE9wZXJhdG9yIGFuZCBBQ0MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxtIFJlcG9zaXRvcnkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbmFtZSBvZiB0aGUgaW1hZ2UgcmVnaXN0cnkuICBGb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZSAiZXhhbXBsZS5yZWdpc3RyeS9hc3RyYSIuICBEbyBub3QgcHJlZml4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggcHJvdG9jb2wuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG5hbWUgb2YgdGhlIEt1YmVybmV0ZXMgc2VjcmV0IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBhdXRoZW50aWNhdGUgd2l0aCB0aGUgaW1hZ2UgcmVnaXN0cnkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmdyZXNzVHlwZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogR2VuZXJpYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSW5ncmVzc1R5cGUgVGhlIHR5cGUgb2YgaW5ncmVzcyB0byB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQUNDIHNob3VsZCBiZSBjb25maWd1cmVkIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIEdlbmVyaWMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBBY2NUcmFlZmlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbGFzdCBuYW1lIG9mIHRoZSBTUkUgc3VwcG9ydGluZyBBc3RyYS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnREdXJhdGlvbjogMjE0MGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPcHRpb25zIGZvciBob3cgQUNDIHNob3VsZCBpbXBsZW1lbnQgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHNlcnZpY2UgbVRMUyBpbiB0aGUgY2x1c3Rlci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0RHVyYXRpb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAyMTQwaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBkdXJhdGlvbiBvZiB0aW1lIGluIGhvdXJzIHRvIHVzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBhIGxpZmVzcGFuIHdoZW4gaXNzdWluZyBzZXJ2aWNlIFRMUyBjZXJ0aWZpY2F0ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEJ5IGRlZmF1bHQsIEFDQyB3aWxsIHVzZSBtVExTIGZvciBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHNlcnZpY2UgY29tbXVuaWNhdGlvbi4gVGhpcyBzaG91bGQgYmUgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB1c2luZyBhIHNlcnZpY2UgbWVzaCB0byBlbmNyeXB0IHNlcnZpY2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSBjb21tdW5pY2F0aW9uIGluc3RlYWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUNsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHN0b3JhZ2UgY2xhc3MgdG8gYmUgdXNlZCBmb3IgUFZDcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3Qgc2V0LCBkZWZhdWx0IHN0b3JhZ2UgY2xhc3Mgd2lsbCBiZSB1c2VkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVJlY2xhaW1Qb2xpY3k6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBSZWNsYWltIHBvbGljeSB0byBiZSBzZXQgZm9yIHBlcnNpc3RlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAgIC0gYWNjb3VudE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGFzdHJhQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICAgICAgIC0gYXN0cmFWZXJzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgLSBhdXRvU3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgICAgIC0gZW1haWwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWRWZXJzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBjZXJ0TWFuYWdlcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBVc2VkIHRvIGluZGljYXRlIHRvIGFjYy1vcGVyYXRvciB0aGF0IGFuIGV4dGVybmFsIGNlcnQtbWFuYWdlcgogICAgICAgICAgICAgICAgICBpcyBpbiB1c2UuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBjbHVzdGVyOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENsdXN0ZXIgZmllbGQgaXMgdXNlZCB0byBpbmRpY2F0ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAga3ViZXJuZXRlcyBjbHVzdGVyIHRoYXQgQUNDIGlzIHJ1bm5pbmcgb24uCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICB0eXBlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICB2ZW5kb3JWZXJzaW9uOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICB2ZXJzaW9uOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgY29uZGl0aW9uczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYSBDb250cm9sIENlbnRlciBJbnN0YW5jZSBjb25kaXRpb25zLgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiQ29uZGl0aW9uIGNvbnRhaW5zIGRldGFpbHMgZm9yIG9uZSBhc3BlY3Qgb2YgdGhlIGN1cnJlbnQKICAgICAgICAgICAgICAgICAgICBzdGF0ZSBvZiB0aGlzIEFQSSBSZXNvdXJjZS4gLS0tIFRoaXMgc3RydWN0IGlzIGludGVuZGVkIGZvciBkaXJlY3QKICAgICAgICAgICAgICAgICAgICB1c2UgYXMgYW4gYXJyYXkgYXQgdGhlIGZpZWxkIHBhdGggLnN0YXR1cy5jb25kaXRpb25zLiAgRm9yIGV4YW1wbGUsCiAgICAgICAgICAgICAgICAgICAgdHlwZSBGb29TdGF0dXMgc3RydWN0eyAgICAgLy8gUmVwcmVzZW50cyB0aGUgb2JzZXJ2YXRpb25zIG9mIGEKICAgICAgICAgICAgICAgICAgICBmb28ncyBjdXJyZW50IHN0YXRlLiAgICAgLy8gS25vd24gLnN0YXR1cy5jb25kaXRpb25zLnR5cGUgYXJlOgogICAgICAgICAgICAgICAgICAgIFwiQXZhaWxhYmxlXCIsIFwiUHJvZ3Jlc3NpbmdcIiwgYW5kIFwiRGVncmFkZWRcIiAgICAgLy8gK3BhdGNoTWVyZ2VLZXk9dHlwZQogICAgICAgICAgICAgICAgICAgIFwgICAgLy8gK3BhdGNoU3RyYXRlZ3k9bWVyZ2UgICAgIC8vICtsaXN0VHlwZT1tYXAgICAgIC8vICtsaXN0TWFwS2V5PXR5cGUKICAgICAgICAgICAgICAgICAgICBcICAgIENvbmRpdGlvbnMgW11tZXRhdjEuQ29uZGl0aW9uIGBqc29uOlwiY29uZGl0aW9ucyxvbWl0ZW1wdHlcIgogICAgICAgICAgICAgICAgICAgIHBhdGNoU3RyYXRlZ3k6XCJtZXJnZVwiIHBhdGNoTWVyZ2VLZXk6XCJ0eXBlXCIgcHJvdG9idWY6XCJieXRlcywxLHJlcCxuYW1lPWNvbmRpdGlvbnNcImAKICAgICAgICAgICAgICAgICAgICBcbiAgICAgLy8gb3RoZXIgZmllbGRzIH0iCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgbGFzdFRyYW5zaXRpb25UaW1lOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGxhc3RUcmFuc2l0aW9uVGltZSBpcyB0aGUgbGFzdCB0aW1lIHRoZSBjb25kaXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbmVkIGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyLiBUaGlzIHNob3VsZCBiZSB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB1bmRlcmx5aW5nIGNvbmRpdGlvbiBjaGFuZ2VkLiAgSWYgdGhhdCBpcyBub3Qga25vd24sIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgdGhlIHRpbWUgd2hlbiB0aGUgQVBJIGZpZWxkIGNoYW5nZWQgaXMgYWNjZXB0YWJsZS4KICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG1lc3NhZ2UgaXMgYSBodW1hbiByZWFkYWJsZSBtZXNzYWdlIGluZGljYXRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscyBhYm91dCB0aGUgdHJhbnNpdGlvbi4gVGhpcyBtYXkgYmUgYW4gZW1wdHkgc3RyaW5nLgogICAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAzMjc2OAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWRHZW5lcmF0aW9uOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9ic2VydmVkR2VuZXJhdGlvbiByZXByZXNlbnRzIHRoZSAubWV0YWRhdGEuZ2VuZXJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb25kaXRpb24gd2FzIHNldCBiYXNlZCB1cG9uLiBGb3IgaW5zdGFuY2UsIGlmIC5tZXRhZGF0YS5nZW5lcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIGN1cnJlbnRseSAxMiwgYnV0IHRoZSAuc3RhdHVzLmNvbmRpdGlvbnNbeF0ub2JzZXJ2ZWRHZW5lcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIDksIHRoZSBjb25kaXRpb24gaXMgb3V0IG9mIGRhdGUgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIG9mIHRoZSBpbnN0YW5jZS4KICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogaW50NjQKICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICByZWFzb246CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVhc29uIGNvbnRhaW5zIGEgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgaW5kaWNhdGluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcmVhc29uIGZvciB0aGUgY29uZGl0aW9uJ3MgbGFzdCB0cmFuc2l0aW9uLiBQcm9kdWNlcnMKICAgICAgICAgICAgICAgICAgICAgICAgb2Ygc3BlY2lmaWMgY29uZGl0aW9uIHR5cGVzIG1heSBkZWZpbmUgZXhwZWN0ZWQgdmFsdWVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBtZWFuaW5ncyBmb3IgdGhpcyBmaWVsZCwgYW5kIHdoZXRoZXIgdGhlIHZhbHVlcyBhcmUgY29uc2lkZXJlZAogICAgICAgICAgICAgICAgICAgICAgICBhIGd1YXJhbnRlZWQgQVBJLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGEgQ2FtZWxDYXNlIHN0cmluZy4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBmaWVsZCBtYXkgbm90IGJlIGVtcHR5LgogICAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAxMDI0CiAgICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IDEKICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF5bQS1aYS16XShbQS1aYS16MC05Xyw6XSpbQS1aYS16MC05X10pPyQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHN0YXR1czoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiwgb25lIG9mIFRydWUsIEZhbHNlLCBVbmtub3duLgogICAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAgIC0gIlRydWUiCiAgICAgICAgICAgICAgICAgICAgICAtICJGYWxzZSIKICAgICAgICAgICAgICAgICAgICAgIC0gVW5rbm93bgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0eXBlIG9mIGNvbmRpdGlvbiBpbiBDYW1lbENhc2Ugb3IgaW4gZm9vLmV4YW1wbGUuY29tL0NhbWVsQ2FzZS4KICAgICAgICAgICAgICAgICAgICAgICAgLS0tIE1hbnkgLmNvbmRpdGlvbi50eXBlIHZhbHVlcyBhcmUgY29uc2lzdGVudCBhY3Jvc3MgcmVzb3VyY2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2UgQXZhaWxhYmxlLCBidXQgYmVjYXVzZSBhcmJpdHJhcnkgY29uZGl0aW9ucyBjYW4gYmUgdXNlZnVsCiAgICAgICAgICAgICAgICAgICAgICAgIChzZWUgLm5vZGUuc3RhdHVzLmNvbmRpdGlvbnMpLCB0aGUgYWJpbGl0eSB0byBkZWNvbmZsaWN0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydGFudC4gVGhlIHJlZ2V4IGl0IG1hdGNoZXMgaXMgKGRuczExMjNTdWJkb21haW5GbXQvKT8ocXVhbGlmaWVkTmFtZUZtdCkKICAgICAgICAgICAgICAgICAgICAgIG1heExlbmd0aDogMzE2CiAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeKFthLXowLTldKFstYS16MC05XSpbYS16MC05XSk/KFwuW2EtejAtOV0oWy1hLXowLTldKlthLXowLTldKT8pKi8pPygoW0EtWmEtejAtOV1bLUEtWmEtejAtOV8uXSopP1tBLVphLXowLTldKSQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgLSBsYXN0VHJhbnNpdGlvblRpbWUKICAgICAgICAgICAgICAgICAgLSBtZXNzYWdlCiAgICAgICAgICAgICAgICAgIC0gcmVhc29uCiAgICAgICAgICAgICAgICAgIC0gc3RhdHVzCiAgICAgICAgICAgICAgICAgIC0gdHlwZQogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgZGVwbG95bWVudFN0YXRlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERlcGxveW1lbnRTdGF0ZSBpcyB0aGUgZGVwbG95bWVudCBzdGF0ZSBvZiB0aGUgQXN0cmEKICAgICAgICAgICAgICAgICAgQ29udHJvbCBDZW50ZXIgSW5zdGFuY2UuIFRoaXMgZmllbGQgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUKICAgICAgICAgICAgICAgICAgIlJlYWR5IiBDb25kaXRpb24gaW5zdGVhZC4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIG9ic2VydmVkR2VuZXJhdGlvbjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbGFzdCBvYnNlcnZlZCBnZW5lcmF0aW9uIG9mIHRoZSBzcGVjLgogICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG9ic2VydmVkU3BlYzoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPYnNlcnZlZFNwZWMgaXMgdGhlIGxhc3Qgb2JzZXJ2ZWQgQXN0cmEgY3VzdG9tIHJlc291cmNlCiAgICAgICAgICAgICAgICAgIHNwZWMKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGFjY291bnROYW1lOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYSBDb250cm9sIENlbnRlciBhY2NvdW50IG5hbWUKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFZhbHVlczoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQWRkaXRpb25hbCB2YWx1ZXMgdG8gYXBwbHkgdG8gdGhlIEFzdHJhQ29udHJvbENlbnRlcgogICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudC4KICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHM6IHRydWUKICAgICAgICAgICAgICAgICAgYXN0cmFBZGRyZXNzOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUFkZHJlc3MgZGVmaW5lcyBob3cgQXN0cmEgd2lsbCBiZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgIGRhdGEgY2VudGVyLiAgVGhpcyBJUCBhZGRyZXNzIGFuZC9vciBETlMgQSByZWNvcmQgbXVzdCBiZSBjcmVhdGVkCiAgICAgICAgICAgICAgICAgICAgICBwcmlvciB0byBwcm92aXNpb25pbmcgQXN0cmEgQ29udHJvbCBDZW50ZXIuIEV4YW1wbGUgLSAiYXN0cmEuZXhhbXBsZS5jb20iCiAgICAgICAgICAgICAgICAgICAgICBUaGUgQSByZWNvcmQgYW5kIGl0cyBJUCBhZGRyZXNzIG11c3QgYmUgYWxsb2NhdGVkIHByaW9yIHRvIHByb3Zpc2lvbmluZwogICAgICAgICAgICAgICAgICAgICAgQXN0cmEgQ29udHJvbCBDZW50ZXIKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgYXN0cmFLdWJlQ29uZmlnU2VjcmV0OgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBc3RyYUt1YmVDb25maWdTZWNyZXQgaWYgcHJlc2VudCBhbmQgc2VjcmV0IGV4aXN0cwogICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3Igd2lsbCBhdHRlbXB0IHRvIGFkZCBLdWJlQ29uZmlnIHRvIE1hbmFnZWQgQ2x1c3RlcnMuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGFzdHJhUmVzb3VyY2VzU2NhbGVyOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTY2FsaW5nIG9wdGlvbnMgZm9yIEFzdHJhQ29udHJvbENlbnRlciBSZXNvdXJjZSBsaW1pdHMuCiAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAtICJPZmYiCiAgICAgICAgICAgICAgICAgICAgLSBEZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGFzdHJhVmVyc2lvbjoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVmVyc2lvbiBvZiBBc3RyYUNvbnRyb2xDZW50ZXIgdG8gZGVwbG95LiAgWW91IGFyZQogICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgYSBIZWxtIHJlcG9zaXRvcnkgd2l0aCBhIGNvcnJlc3BvbmRpbmcgdmVyc2lvbi4gRXhhbXBsZQogICAgICAgICAgICAgICAgICAgICAgLSAxLjUuMiwgMS40LjItcGF0Y2gKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiAoXGQqXC5cZCpcLlxkKigtLiopPyl8XGQrLS4qCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGF1dG9TdXBwb3J0OgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBdXRvU3VwcG9ydCBpbmRpY2F0ZXMgd2lsbGluZ25lc3MgdG8gcGFydGljaXBhdGUKICAgICAgICAgICAgICAgICAgICAgIGluIE5ldEFwcCdzIHByb2FjdGl2ZSBzdXBwb3J0IGFwcGxpY2F0aW9uLCBOZXRBcHAgQWN0aXZlIElRLgogICAgICAgICAgICAgICAgICAgICAgQW4gaW50ZXJuZXQgY29ubmVjdGlvbiBpcyByZXF1aXJlZCAocG9ydCA0NDIpIGFuZCBhbGwgc3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgZGF0YSBpcyBhbm9ueW1pemVkLiBUaGUgZGVmYXVsdCBlbGVjdGlvbiBpcyB0cnVlIGFuZCBpbmRpY2F0ZXMKICAgICAgICAgICAgICAgICAgICAgIG5vIHN1cHBvcnQgZGF0YSB3aWxsIGJlIHNlbnQgdG8gTmV0QXBwLiBBbiBlbXB0eSBvciBibGFuayBlbGVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgaXMgdGhlIHNhbWUgYXMgYSBkZWZhdWx0IGVsZWN0aW9uLiBBaXIgZ2FwcGVkIGluc3RhbGxhdGlvbnMKICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBlbnRlciBmYWxzZS4KICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgZW5yb2xsZWQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEVucm9sbGVkIGRldGVybWluZXMgaWYgeW91IHdhbnQgdG8gc2VuZCBhbm9ueW1vdXMKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhIHRvIE5ldEFwcCBmb3Igc3VwcG9ydCBwdXJwb3Nlcy4KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICAgICAgdXJsOgogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBodHRwczovL3N1cHBvcnQubmV0YXBwLmNvbS9hc3VwcHJvZC9wb3N0LzEuMC9wb3N0QXN1cAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVVJMIGRldGVybWluZXMgd2hlcmUgdGhlIGFub255bW91cyBkYXRhIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBzZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgIC0gZW5yb2xsZWQKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgYXZwRGVwbG95OgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdPcHRpb24gdG8gYWxsb3cgdXNlciB0byBkaXNhYmxlIGRlcGxveW1lbnQgb2YgQVZQCiAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciBOb3RlOiBBVlAgT3BlcmF0b3IgaXMgbm90IGRlcGxveWVkIGJ5IGRlZmF1bHQuJwogICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgY3JkczoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogT3B0aW9ucyBmb3IgaG93IEFDQyBzaG91bGQgaGFuZGxlIENSRHMuT3B0aW9ucyBmb3IKICAgICAgICAgICAgICAgICAgICAgIGhvdyBBQ0Mgc2hvdWxkIGhhbmRsZSBDUkRzLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICBleHRlcm5hbENlcnRNYW5hZ2VyOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQnkgZGVmYXVsdCwgQUNDIHdpbGwgaW5zdGFsbCB0aGUgcmVxdWlyZWQgY2VydC1tYW5hZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JEcy4gTm90ZSwgQ1JEcyBhcmUgYSBjbHVzdGVyIHdpZGUgb2JqZWN0IGFuZCBpbnN0YWxsaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSBtYXkgaGF2ZSBhbiBpbXBhY3Qgb24gb3RoZXIgcGFydHMgb2YgdGhlIGNsdXN0ZXIuIFlvdQogICAgICAgICAgICAgICAgICAgICAgICAgIGNhbiB1c2UgdGhpcyBmbGFnIHRvIHNpZ25hbCB0byBBQ0MgdGhhdCB0aGVzZSBDUkRzIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBpbnN0YWxsZWQgYW5kIG1hbmFnZWQgYnkgdGhlIGNsdXN0ZXIgYWRtaW5pc3RyYXRvciBvdXRzaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgQUNDLgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICBleHRlcm5hbFRyYWVmaWs6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBCeSBkZWZhdWx0LCBBQ0Mgd2lsbCBpbnN0YWxsIHRoZSByZXF1aXJlZCBUcmFlZmlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JEcy4gTm90ZSwgQ1JEcyBhcmUgYSBjbHVzdGVyIHdpZGUgb2JqZWN0IGFuZCBpbnN0YWxsaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSBtYXkgaGF2ZSBhbiBpbXBhY3Qgb24gb3RoZXIgcGFydHMgb2YgdGhlIGNsdXN0ZXIuIFlvdQogICAgICAgICAgICAgICAgICAgICAgICAgIGNhbiB1c2UgdGhpcyBmbGFnIHRvIHNpZ25hbCB0byBBQ0MgdGhhdCB0aGVzZSBDUkRzIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBpbnN0YWxsZWQgYW5kIG1hbmFnZWQgYnkgdGhlIGNsdXN0ZXIgYWRtaW5pc3RyYXRvciBvdXRzaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgQUNDLgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICBzaG91bGRVcGdyYWRlOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRGV0ZXJtaW5lcyBpZiBDUkRzIHNob3VsZCBiZSB1cGdyYWRlZCB3aGVuIEFDQwogICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHVwZ3JhZGVkLiBJZiB0cnVlLCBhbGwgZXh0ZXJuYWwgQ1JEcyB3aWxsIGJlIHVwZ3JhZGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UsIHRoZXkgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBBQ0MgdXBncmFkZSBwcm9jZXNzLgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIGVtYWlsOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFbWFpbEFkZHJlc3Mgd2lsbCBiZSBub3RpZmllZCBieSBBc3RyYSBhcyBldmVudHMKICAgICAgICAgICAgICAgICAgICAgIHdhcnJhbnQuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZToKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGZpcnN0IG5hbWUgb2YgdGhlIFNSRSBzdXBwb3J0aW5nIEFzdHJhLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBpbWFnZVJlZ2lzdHJ5OgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgY29udGFpbmVyIGltYWdlIHJlZ2lzdHJ5IHRoYXQgaXMgaG9zdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgIEFzdHJhIGFwcGxpY2F0aW9uIGltYWdlcywgQUNDIE9wZXJhdG9yIGFuZCBBQ0MgSGVsbSBSZXBvc2l0b3J5LgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG5hbWUgb2YgdGhlIGltYWdlIHJlZ2lzdHJ5LiAgRm9yIGV4YW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAiZXhhbXBsZS5yZWdpc3RyeS9hc3RyYSIuICBEbyBub3QgcHJlZml4IHdpdGggcHJvdG9jb2wuCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgc2VjcmV0OgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG5hbWUgb2YgdGhlIEt1YmVybmV0ZXMgc2VjcmV0IHRoYXQgd2lsbCBhdXRoZW50aWNhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBpbWFnZSByZWdpc3RyeS4KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIGluZ3Jlc3NUeXBlOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IEdlbmVyaWMKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSW5ncmVzc1R5cGUgVGhlIHR5cGUgb2YgaW5ncmVzcyB0byB0aGF0IEFDQyBzaG91bGQKICAgICAgICAgICAgICAgICAgICAgIGJlIGNvbmZpZ3VyZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAtIEdlbmVyaWMKICAgICAgICAgICAgICAgICAgICAtIEFjY1RyYWVmaWsKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBsYXN0IG5hbWUgb2YgdGhlIFNSRSBzdXBwb3J0aW5nIEFzdHJhLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBtdGxzOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICBjZXJ0RHVyYXRpb246IDIxNDBoCiAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE9wdGlvbnMgZm9yIGhvdyBBQ0Mgc2hvdWxkIGltcGxlbWVudCBzZXJ2aWNlIHRvIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgIG1UTFMgaW4gdGhlIGNsdXN0ZXIuCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIGNlcnREdXJhdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogMjE0MGgKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBkdXJhdGlvbiBvZiB0aW1lIGluIGhvdXJzIHRvIHVzZSBhcyBhIGxpZmVzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBpc3N1aW5nIHNlcnZpY2UgVExTIGNlcnRpZmljYXRlcy4KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOgogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBCeSBkZWZhdWx0LCBBQ0Mgd2lsbCB1c2UgbVRMUyBmb3Igc2VydmljZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgY29tbXVuaWNhdGlvbi4gVGhpcyBzaG91bGQgYmUgZGlzYWJsZWQgd2hlbiB1c2luZwogICAgICAgICAgICAgICAgICAgICAgICAgIGEgc2VydmljZSBtZXNoIHRvIGVuY3J5cHQgc2VydmljZSB0byBzZXJ2aWNlIGNvbW11bmljYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkLgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHN0b3JhZ2VDbGFzczoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHN0b3JhZ2UgY2xhc3MgdG8gYmUgdXNlZCBmb3IgUFZDcy4gSWYgbm90IHNldCwKICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgc3RvcmFnZSBjbGFzcyB3aWxsIGJlIHVzZWQuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHZvbHVtZVJlY2xhaW1Qb2xpY3k6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFJlY2xhaW0gcG9saWN5IHRvIGJlIHNldCBmb3IgcGVyc2lzdGVudCB2b2x1bWVzCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gYWNjb3VudE5hbWUKICAgICAgICAgICAgICAgIC0gYXN0cmFBZGRyZXNzCiAgICAgICAgICAgICAgICAtIGFzdHJhVmVyc2lvbgogICAgICAgICAgICAgICAgLSBhdXRvU3VwcG9ydAogICAgICAgICAgICAgICAgLSBlbWFpbAogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgb2JzZXJ2ZWRWZXJzaW9uOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBsYXN0IG9ic2VydmVkIGFzdHJhVmVyc2lvbiBvZiB0aGUgc3BlYy4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHBvc3RJbnN0YWxsOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFBvc3RJbnN0YWxsIGlzIHRoZSBzdGF0dXMgb2YgdGhlIEFzdHJhIENvbnRyb2wgQ2VudGVyCiAgICAgICAgICAgICAgICAgIEluc3RhbmNlJ3MgaW5pdGlhbCBQb3N0SW5zdGFsbCBzdGVwLiBUaGlzIGZpZWxkIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZQogICAgICAgICAgICAgICAgICB1c2UgdGhlICJQb3N0SW5zdGFsbENvbXBsZXRlIiBDb25kaXRpb24gaW5zdGVhZC4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHNlcnZpY2VNZXNoOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VNZXNoIGZpZWxkIGlzIHVzZWQgdG8gaW5kaWNhdGUgaW5mb3JtYXRpb24gYWJvdXQKICAgICAgICAgICAgICAgICAgdGhlIHNlcnZpY2UgbWVzaCBydW5uaW5nIG9uIGFjYyBuYW1lc3BhY2UKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHR5cGU6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICB1dWlkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFV1aWQgaXMgdGhlIHVuaXF1ZSBJRCBmb3IgYSBnaXZlbiBBc3RyYSBDb250cm9sIENlbnRlcgogICAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb24uIFRoaXMgVXVpZCBpcyB1bmlxdWUgdGhyb3VnaG91dCB0aGUgazhzIGNsdXN0ZXIgbGlmZWN5Y2xlLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzdWJyZXNvdXJjZXM6CiAgICAgIHN0YXR1czoge30Kc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IFJvbGUKbWV0YWRhdGE6CiAgbmFtZTogYWNjLW9wZXJhdG9yLWxlYWRlci1lbGVjdGlvbi1yb2xlCiAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgLSBjb29yZGluYXRpb24uazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY29uZmlnbWFwcwogIC0gbGVhc2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gcGF0Y2gKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gZXZlbnRzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHBhdGNoCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZTogYWNjLW9wZXJhdG9yLW1hbmFnZXItcm9sZQpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAnKicKICByZXNvdXJjZXM6CiAgLSAnKicKICB2ZXJiczoKICAtICcqJwotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBhY2Mtb3BlcmF0b3ItbWV0cmljcy1yZWFkZXIKcnVsZXM6Ci0gbm9uUmVzb3VyY2VVUkxzOgogIC0gL21ldHJpY3MKICB2ZXJiczoKICAtIGdldAotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBhY2Mtb3BlcmF0b3ItcHJveHktcm9sZQpydWxlczoKLSBhcGlHcm91cHM6CiAgLSBhdXRoZW50aWNhdGlvbi5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSB0b2tlbnJldmlld3MKICB2ZXJiczoKICAtIGNyZWF0ZQotIGFwaUdyb3VwczoKICAtIGF1dGhvcml6YXRpb24uazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gc3ViamVjdGFjY2Vzc3Jldmlld3MKICB2ZXJiczoKICAtIGNyZWF0ZQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBhY2Mtb3BlcmF0b3ItbGVhZGVyLWVsZWN0aW9uLXJvbGViaW5kaW5nCiAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZTogYWNjLW9wZXJhdG9yLWxlYWRlci1lbGVjdGlvbi1yb2xlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogZGVmYXVsdAogIG5hbWVzcGFjZTogbmV0YXBwLWFjYy1vcGVyYXRvcgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogYWNjLW9wZXJhdG9yLW1hbmFnZXItcm9sZWJpbmRpbmcKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogYWNjLW9wZXJhdG9yLW1hbmFnZXItcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGRlZmF1bHQKICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGFjYy1vcGVyYXRvci1wcm94eS1yb2xlYmluZGluZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBhY2Mtb3BlcmF0b3ItcHJveHktcm9sZQpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGRlZmF1bHQKICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKLS0tCmFwaVZlcnNpb246IHYxCmRhdGE6CiAgY29udHJvbGxlcl9tYW5hZ2VyX2NvbmZpZy55YW1sOiB8CiAgICBhcGlWZXJzaW9uOiBjb250cm9sbGVyLXJ1bnRpbWUuc2lncy5rOHMuaW8vdjFhbHBoYTEKICAgIGtpbmQ6IENvbnRyb2xsZXJNYW5hZ2VyQ29uZmlnCiAgICBoZWFsdGg6CiAgICAgIGhlYWx0aFByb2JlQmluZEFkZHJlc3M6IDo4MDgxCiAgICBtZXRyaWNzOgogICAgICBiaW5kQWRkcmVzczogMTI3LjAuMC4xOjgwODAKICAgIHdlYmhvb2s6CiAgICAgIHBvcnQ6IDk0NDMKICAgIGxlYWRlckVsZWN0aW9uOgogICAgICBsZWFkZXJFbGVjdDogdHJ1ZQogICAgICByZXNvdXJjZU5hbWU6IDE4OTZiODlhLm5ldGFwcC5pbwpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogYWNjLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnCiAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGNvbnRyb2wtcGxhbmU6IGNvbnRyb2xsZXItbWFuYWdlcgogIG5hbWU6IGFjYy1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlCiAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCnNwZWM6CiAgcG9ydHM6CiAgLSBuYW1lOiBodHRwcwogICAgcG9ydDogODQ0MwogICAgdGFyZ2V0UG9ydDogaHR0cHMKICBzZWxlY3RvcjoKICAgIGNvbnRyb2wtcGxhbmU6IGNvbnRyb2xsZXItbWFuYWdlcgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBhY2Mtb3BlcmF0b3Itd2ViaG9vay1zZXJ2aWNlCiAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCnNwZWM6CiAgcG9ydHM6CiAgLSBwb3J0OiA0NDMKICAgIHByb3RvY29sOiBUQ1AKICAgIHRhcmdldFBvcnQ6IDk0NDMKICBzZWxlY3RvcjoKICAgIGNvbnRyb2wtcGxhbmU6IGNvbnRyb2xsZXItbWFuYWdlcgotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGNvbnRyb2wtcGxhbmU6IGNvbnRyb2xsZXItbWFuYWdlcgogIG5hbWU6IGFjYy1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIKICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKc3BlYzoKICByZXBsaWNhczogMQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGNvbnRyb2wtcGxhbmU6IGNvbnRyb2xsZXItbWFuYWdlcgogIHN0cmF0ZWd5OgogICAgdHlwZTogUmVjcmVhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgY29udHJvbC1wbGFuZTogY29udHJvbGxlci1tYW5hZ2VyCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIGFyZ3M6CiAgICAgICAgLSAtLWhlYWx0aC1wcm9iZS1iaW5kLWFkZHJlc3M9OjgwODEKICAgICAgICAtIC0tbWV0cmljcy1iaW5kLWFkZHJlc3M9MTI3LjAuMC4xOjgwODAKICAgICAgICAtIC0tbGVhZGVyLWVsZWN0CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9tYW5hZ2VyCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQUNDT1BfTE9HX0xFVkVMCiAgICAgICAgICB2YWx1ZTogIjIiCiAgICAgICAgLSBuYW1lOiBBQ0NPUF9IRUxNX0lOU1RBTExUSU1FT1VUCiAgICAgICAgICB2YWx1ZTogNW0KICAgICAgICBpbWFnZTogQVNUUkFfSU1BR0VfUkVHSVNUUlkvYWNjLW9wZXJhdG9yOjIyLjA1Ljk5CiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgICAgICAgcG9ydDogODA4MQogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTUKICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDIwCiAgICAgICAgbmFtZTogbWFuYWdlcgogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDogOTQ0MwogICAgICAgICAgbmFtZTogd2ViaG9vay1zZXJ2ZXIKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9yZWFkeXoKICAgICAgICAgICAgcG9ydDogODA4MQogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNQogICAgICAgICAgcGVyaW9kU2Vjb25kczogMTAKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgICBsaW1pdHM6CiAgICAgICAgICAgIGNwdTogMzAwbQogICAgICAgICAgICBtZW1vcnk6IDc1ME1pCiAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgY3B1OiAxMDBtCiAgICAgICAgICAgIG1lbW9yeTogNzVNaQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIGFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbjogZmFsc2UKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBtb3VudFBhdGg6IC90bXAvazhzLXdlYmhvb2stc2VydmVyL3NlcnZpbmctY2VydHMKICAgICAgICAgIG5hbWU6IGNlcnQKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIC0gYXJnczoKICAgICAgICAtIC0tc2VjdXJlLWxpc3Rlbi1hZGRyZXNzPTAuMC4wLjA6ODQ0MwogICAgICAgIC0gLS11cHN0cmVhbT1odHRwOi8vMTI3LjAuMC4xOjgwODAvCiAgICAgICAgLSAtLWxvZ3Rvc3RkZXJyPXRydWUKICAgICAgICAtIC0tdj0xMAogICAgICAgIGltYWdlOiBBU1RSQV9JTUFHRV9SRUdJU1RSWS9rdWJlLXJiYWMtcHJveHk6djQuOC4wCiAgICAgICAgbmFtZToga3ViZS1yYmFjLXByb3h5CiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBjb250YWluZXJQb3J0OiA4NDQzCiAgICAgICAgICBuYW1lOiBodHRwcwogICAgICBpbWFnZVB1bGxTZWNyZXRzOiBbXQogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcnVuQXNVc2VyOiA2NTUzMgogICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczogMTAKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiBjZXJ0CiAgICAgICAgc2VjcmV0OgogICAgICAgICAgZGVmYXVsdE1vZGU6IDQyMAogICAgICAgICAgc2VjcmV0TmFtZTogd2ViaG9vay1zZXJ2ZXItY2VydAotLS0KYXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxCmtpbmQ6IENlcnRpZmljYXRlCm1ldGFkYXRhOgogIG5hbWU6IGFjYy1vcGVyYXRvci1zZXJ2aW5nLWNlcnQKICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKc3BlYzoKICBkbnNOYW1lczoKICAtIGFjYy1vcGVyYXRvci13ZWJob29rLXNlcnZpY2UubmV0YXBwLWFjYy1vcGVyYXRvci5zdmMKICAtIGFjYy1vcGVyYXRvci13ZWJob29rLXNlcnZpY2UubmV0YXBwLWFjYy1vcGVyYXRvci5zdmMuY2x1c3Rlci5sb2NhbAogIGlzc3VlclJlZjoKICAgIGtpbmQ6IElzc3VlcgogICAgbmFtZTogYWNjLW9wZXJhdG9yLXNlbGZzaWduZWQtaXNzdWVyCiAgc2VjcmV0TmFtZTogd2ViaG9vay1zZXJ2ZXItY2VydAotLS0KYXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxCmtpbmQ6IElzc3VlcgptZXRhZGF0YToKICBuYW1lOiBhY2Mtb3BlcmF0b3Itc2VsZnNpZ25lZC1pc3N1ZXIKICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKc3BlYzoKICBzZWxmU2lnbmVkOiB7fQotLS0KYXBpVmVyc2lvbjogYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pby92MQpraW5kOiBNdXRhdGluZ1dlYmhvb2tDb25maWd1cmF0aW9uCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgY2VydC1tYW5hZ2VyLmlvL2luamVjdC1jYS1mcm9tOiBuZXRhcHAtYWNjLW9wZXJhdG9yL2FjYy1vcGVyYXRvci1zZXJ2aW5nLWNlcnQKICBuYW1lOiBhY2Mtb3BlcmF0b3ItbXV0YXRpbmctd2ViaG9vay1jb25maWd1cmF0aW9uCndlYmhvb2tzOgotIGFkbWlzc2lvblJldmlld1ZlcnNpb25zOgogIC0gdjFiZXRhMQogIGNsaWVudENvbmZpZzoKICAgIHNlcnZpY2U6CiAgICAgIG5hbWU6IGFjYy1vcGVyYXRvci13ZWJob29rLXNlcnZpY2UKICAgICAgbmFtZXNwYWNlOiBuZXRhcHAtYWNjLW9wZXJhdG9yCiAgICAgIHBhdGg6IC9tdXRhdGUtYXN0cmEtbmV0YXBwLWlvLXYxLWFzdHJhY29udHJvbGNlbnRlcgogIGZhaWx1cmVQb2xpY3k6IEZhaWwKICBuYW1lOiBtYXN0cmFjb250cm9sY2VudGVyLmtiLmlvCiAgcnVsZXM6CiAgLSBhcGlHcm91cHM6CiAgICAtIGFzdHJhLm5ldGFwcC5pbwogICAgYXBpVmVyc2lvbnM6CiAgICAtIHYxCiAgICBvcGVyYXRpb25zOgogICAgLSBDUkVBVEUKICAgIC0gVVBEQVRFCiAgICByZXNvdXJjZXM6CiAgICAtIGFzdHJhY29udHJvbGNlbnRlcnMKICBzaWRlRWZmZWN0czogTm9uZQotLS0KYXBpVmVyc2lvbjogYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pby92MQpraW5kOiBWYWxpZGF0aW5nV2ViaG9va0NvbmZpZ3VyYXRpb24KbWV0YWRhdGE6CiAgYW5ub3RhdGlvbnM6CiAgICBjZXJ0LW1hbmFnZXIuaW8vaW5qZWN0LWNhLWZyb206IG5ldGFwcC1hY2Mtb3BlcmF0b3IvYWNjLW9wZXJhdG9yLXNlcnZpbmctY2VydAogIG5hbWU6IGFjYy1vcGVyYXRvci12YWxpZGF0aW5nLXdlYmhvb2stY29uZmlndXJhdGlvbgp3ZWJob29rczoKLSBhZG1pc3Npb25SZXZpZXdWZXJzaW9uczoKICAtIHYxCiAgLSB2MWJldGExCiAgY2xpZW50Q29uZmlnOgogICAgc2VydmljZToKICAgICAgbmFtZTogYWNjLW9wZXJhdG9yLXdlYmhvb2stc2VydmljZQogICAgICBuYW1lc3BhY2U6IG5ldGFwcC1hY2Mtb3BlcmF0b3IKICAgICAgcGF0aDogL3ZhbGlkYXRlLWFzdHJhLW5ldGFwcC1pby12MS1hc3RyYWNvbnRyb2xjZW50ZXIKICBmYWlsdXJlUG9saWN5OiBGYWlsCiAgbmFtZTogdmFzdHJhY29udHJvbGNlbnRlci5rYi5pbwogIHJ1bGVzOgogIC0gYXBpR3JvdXBzOgogICAgLSBhc3RyYS5uZXRhcHAuaW8KICAgIGFwaVZlcnNpb25zOgogICAgLSB2MQogICAgb3BlcmF0aW9uczoKICAgIC0gQ1JFQVRFCiAgICAtIFVQREFURQogICAgcmVzb3VyY2VzOgogICAgLSBhc3RyYWNvbnRyb2xjZW50ZXJzCiAgc2lkZUVmZmVjdHM6IE5vbmUK
      mediaType: application/x-yaml
