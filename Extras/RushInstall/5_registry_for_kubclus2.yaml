apiVersion: v1
kind: Namespace
metadata:
  name: registry
---
 # PS C:\Users\Administrator.DEMO\repo\registry> kubectl create secret tls certs-secret --cert=tls.crt --key=tls.key --dry-run=client -o yaml

apiVersion: v1
kind: Secret
metadata:
  name: certs-secret
  namespace: registry
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZSRENDQXl5Z0F3SUJBZ0lVVFFBaSs2UHRSSnBJd0ltcERsWUFSeDVmKzljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dqRVlNQllHQTFVRUF3d1BaRzlqYTJWeUxYSmxaMmx6ZEhKNU1CNFhEVEl5TURNeE16SXhNVEkxTWxvWApEVEl6TURNeE16SXhNVEkxTWxvd0dqRVlNQllHQTFVRUF3d1BaRzlqYTJWeUxYSmxaMmx6ZEhKNU1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2YkRhSWw2UUQ2bytDTEpYMFpiTERFN3ZBZmMKaHVrNzlCSWdCc0pyM1dxbVBJU1FBU3FzTVpIUjhMVFNOY0FjdGZyS01PdzNmMmd3U2d5VHUxam1GQnNzTk91TQpzRzhmbWhzTzZFTVlTKzI2bDJsaFZTbjRwNklTWHphdUZGSkl2WWFCTHdJS3JEbURTRlVvcG9SN3o0R0FIUWpmCnBoeUxBM2JNWlFqN1BOeVpTV3BMditlN1h0a2ovK2ZnK21vYnVwcW1MYjkyd0RPVFNKRlZMWEpaWFUwTjJnUi8KRTdFeGZ0NWszMkl2L1dKNmdQWFMvUlJod2VydmgrQzBWbCtpS0xaeURDRjBEc1NRNGIvd25aRzF4bHBqM1lUawpFL01SMWdqd0IvRVQ3Rkhmck9NakNCa3kwN3lvZWtuczZ5K1VVTE5mQm1LNTlnUE1sQ3ZIb0JwZU55aEFZOGVMCmlTUVZIRDlIT3lRcnZEdTdaTnhZV3pDWk82THFkanBlRmFzb0lpTVJzd0RzWGt5VTFWOGdGZWVmMjQvQ0w4ZUUKUUI5cW9kcjMvTTNqNGZwWkltVWFHZGl2TGNiYjhIYzlXbWt4d2Z4eUk5eW1BTTVEdkx4Q2FsNXJ5NDhDc2h4ago3Ny9WVXBvYlJPb0ZTMGYrUUJKZEREU1M4RTdlZVd2NFhUTTZjYkVQc2o5eWZuVE5vb2xUM1VoKzJ6YTR1dWtMCmgvNjhwdlJvT0Q4TVJ1ejh6MFF1QXpGVWlNWnhNL0JyMjNGbXBtWlZncW1oL0xtM0JCaWVUdEkwdHMrS3cwS0UKdU4yOVNXMFFSSVFXQ0pTbWVpd3BhZkZhVVZWRWJ3SHJyNGx2ZXlRbTBRbnlPZm41dFdSbFYvem1EZDgwUEVzcwpIWUFGL1lqMWp4eFNKbnNDQXdFQUFhT0JnVEIvTUIwR0ExVWREZ1FXQkJUSTQ2YmxVMWxzM21aWHhteG9WU0VWCnlsaUtpREFmQmdOVkhTTUVHREFXZ0JUSTQ2YmxVMWxzM21aWHhteG9WU0VWeWxpS2lEQVBCZ05WSFJNQkFmOEUKQlRBREFRSC9NQ3dHQTFVZEVRUWxNQ09DRDJSdlkydGxjaTF5WldkcGMzUnllWWNFd0tnQVBZY0V3S2dBUG9jRQp3S2dBUHpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQW9VcDVwUHQrMDJla2ZXM0JFek55RFlLZnZGcGErdTUvCmhRSFRUZXVudUU3LzFMczJHQ2xMeENSV0tWb3JQRkhyYmxjM3ZWamg0UmhKZnpwcjBXT1N0N1UzeFZjUGExSm8KU292SGE3cTV2K2ExUU00ZCs2blU0VFJMaGNZeW5NRUxsb1VsdjBBU2xua0F6R00xZTJQNzFjQzlHdVNXSzZWYgpKc2xnMGw4Ti9sSXJFYmwrdkhOYUU5bmt0M3lIR3BtZ2ZpclhkdVA5SkUycnZIK3FYTmNkZkYxeGFna1hZVzlMCmtGMkMyL1FFUkhSUmJuOGQrTVhZZnl4dzUxa21xRytVRmdPeVM3ajhzSEtoekdoMEtoUDhRcGNKUEl4VTIyUTUKOTk0blp1OXZKN0JWRi9kQmpuTks0OWFSMVpqWHk5VFQvWTJvcGpySGY3SlhKdUFtN1UxWlFyVkNWRUtjT0gzZQpQMnN5bk40MHFwOHFod2JNMjY4cWRDeU5QYVdMVUJXNHRiSmlCS1ZncXpjRVRlcVE3THJyK1RsRUhkTjl3RVM5CkdnT1FBOEFpT2tUVGtnSUNkZENDaXdySFp3T2ZHeE9hcVN2eEZ1Rk5HRm9ta2RJVUw2Y1NleEhiSndSemNSQTQKTC9kRDVybEJvcDdkVDBZS0lvcXhRVmpYNHVybHlvVzBlQWZWQ3ZIZE5rcWNDWVAxZnZhQ2ZidDQ5NWV2NDFwLwpnVzhxOTJhS2NyVWVXTmovanl6ZnRIR2ZVb0xtcUhZaWdLQ0ZWTUhzS1VwZE1BSzlPU3NrQmxETVdBeFRrNEE1ClVuVEFFUURQRDJyL0cwSVV5ZUNCR21xdGxQelFGMm9MdU9qUzdJWG44NmZibHNWeUxOSlc0bEU1KzkwbDdPK0gKVGdFWFJzV3NpTHM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRE85c05vaVhwQVBxajQKSXNsZlJsc3NNVHU4Qjl5RzZUdjBFaUFHd212ZGFxWThoSkFCS3F3eGtkSHd0Tkkxd0J5MStzb3c3RGQvYURCSwpESk83V09ZVUd5dzA2NHl3YngrYUd3N29ReGhMN2JxWGFXRlZLZmlub2hKZk5xNFVVa2k5aG9FdkFncXNPWU5JClZTaW1oSHZQZ1lBZENOK21ISXNEZHN4bENQczgzSmxKYWt1LzU3dGUyU1AvNStENmFodTZtcVl0djNiQU01TkkKa1ZVdGNsbGRUUTNhQkg4VHNURiszbVRmWWkvOVlucUE5ZEw5RkdIQjZ1K0g0TFJXWDZJb3RuSU1JWFFPeEpEaAp2L0Nka2JYR1dtUGRoT1FUOHhIV0NQQUg4UlBzVWQrczR5TUlHVExUdktoNlNlenJMNVJRczE4R1lybjJBOHlVCks4ZWdHbDQzS0VCang0dUpKQlVjUDBjN0pDdThPN3RrM0ZoYk1KazdvdXAyT2w0VnF5Z2lJeEd6QU94ZVRKVFYKWHlBVjU1L2JqOEl2eDRSQUgycWgydmY4emVQaCtsa2laUm9aMks4dHh0dndkejFhYVRIQi9ISWozS1lBemtPOAp2RUpxWG12TGp3S3lIR1B2djlWU21odEU2Z1ZMUi81QUVsME1OSkx3VHQ1NWEvaGRNenB4c1EreVAzSitkTTJpCmlWUGRTSDdiTnJpNjZRdUgvcnltOUdnNFB3eEc3UHpQUkM0RE1WU0l4bkV6OEd2YmNXYW1abFdDcWFIOHViY0UKR0o1TzBqUzJ6NHJEUW9TNDNiMUpiUkJFaEJZSWxLWjZMQ2xwOFZwUlZVUnZBZXV2aVc5N0pDYlJDZkk1K2ZtMQpaR1ZYL09ZTjN6UThTeXdkZ0FYOWlQV1BIRkltZXdJREFRQUJBb0lDQUF2b09ZelpuLzF6UFhCdE8rMnQxQkFDClV4LzV5YysvT25KTDJxalk1YkRLOG41MzEvc2hNOS8wTmtKbGZOU1gxVzhJMnpvZVZRRVJBdm8zcUFZMjBxSGsKZ0ZJWkhUS0hhaWVKRi8zMzRqMTRFMnlqcFBScjRrRHV1NlRidGY4NFRyUU11WUQxV3B6WEFEMFluU3FiWTY0bwpFckZZOGRrU09sTThNZjA4RzR4QVd0ZFU5TCs1T3RmMW9UTVhhYU91bUNMUHcvRE0yNjJxS2ZhYVdlNnY3Z0ZHCnJoM1ZkV1F5SlJsWi9TNjI3UERraWd6Q1Y5MjBudjB6b1kxTk9jTGdaS2wzK2E3RisvSGZrRUJVdFNpem1lUXMKRGlQUUFmazkybEJZbWtxeXJZVkNucDVKUVJvMXJPMXVwTGpJYVFlTTZMa040TkV5dStVeUNjS2FsRFViWDBFdAptd3ZQV1BhNVJVNVlWajlsTE15L0VZQUNRcG1BbW51d3AvV2JQUUp4MXFSZlBpc05mZ2dDT25uRmRxdUtnVFFXCjA0bUV5WkNCZUsvNnh1YkVvQnFVaVBxQzVFZTc5K25wZmh0cno1QjFNbGd3K0ZhUm1HUmRtUzJwamUvNXNvbHkKaUYzRFhjOFROb2l1M3g4Q0UySVZQeU1zeGlydkl3cVc3L00yTmptMWYvOXlhZis0MG9vVDRPZDUzUVkzWm5oWQpYdStNZG1NM3RXdC9jUmtDVGVKdTRTOTJzR3Z3SzJ3NDZVelJpRHFDSUZycVIzbXk1eDJCcUFjYkVBWDkrclhNCkdJOVB6RUMvZ0NNU1l6QWtCYndIWEJRd09mSlVuUTB1QVBzVHNFY2o0d0ErWWFQeC82YmNlVjVDQ3BnQ2RRTkUKYzN0UEV6T3RDa2FXNUt6WWx1enhBb0lCQVFEeTFHMTBHcWUxZzZqSmk4Z2dPUnJuWE9kMzBSdFNyM0RvOWl0VwpxZUIyeGFQWWRMN2xTdWRnamJEVjRQMGZ6ZEVhWXlwdmx1NWwra1VKUmZ2cFQ5YmYyNU9PZmkyb3N6b2lBTTZaCjRxd0xydGNPRytMYmFrbWdvOVVPcTJ4bEJlRnpFN09tMnc0djRNUGdVdlBFc3ZUTExzYjRzNHdkWUx1MjZRTzgKeW1Ka1VVelgrYkpSL1QwMVZEZWowWVVidXZpVldPZTdYY0FjRDhGdk9aS0llREtEeGUyT2NtL3U5TDRKMC9QRAp4U2JVZEQrY25tYjVlenl3UWxBMG5QZHBSTjMrdTFuSlp2Qy95R01IcS9RdEtBMmhNRi8vamFPblIvQ0JQL2NVCjc5VTNXODdha21TazBZa1p1b084K2doQU1VT0U3dWhCbHYrRjBlUzNBbjJjdWhaeEFvSUJBUURhTUZzT1gyU0YKcnovUXpzaWpEREs4bXgyQnJweHR0NGVBR043U0FtQ0lRNFRJaGNmM0I0THIvcmxEN2R3SlFWQ3h3WElvYmJDUwphM280WlRYcTNna1hWRTdzYXUxdE4wUStCdVdVTzFSQUR1UlM0MTlCdkpWNEFFeUZZNDhvMnpHelFGaStqU21aCkZIRUhJUFoxUGZWYXJaQ0h1ejJyQ2swc1YzMmQrT3k5RXZpZXU4SGlHZ3RHenVocXlic3I4QkdPbFFiSk1xUGMKUC9wb1VmVFJjRGI4WHEzWW80Z1ZrcFhLSDdydzNiSzR5eFpTbVp2cXdmL1hHK2xhS3lsUEJXS09DM0FhUXcyZgo4MHl0MFpiNGRpUW9QaWN3Z05taXJ2V1ZYM29XUFh4R0w0QlZSQU5ST2t3SzUxSklybHJWcUFMR3Q0dDRZeUVFCkowb3ozdXZNWmptckFvSUJBUUR2R1QrVXZOSTVwaVBDSUFLeng4YTMzUUNGTjc1aGtpSHBJTXJYa0hsV09aRDEKQnk4WDhzTVVqUzk3eVFjMEU2STdDejJ6bHJleWJkVWdKbXErOWtBck43ZDQ3TURraFdWT0tlRkVJSzhxNmNNVApQMTRHa2dkaFJ5LzRPODZGUWw4VXdtZDRlZVRrTzdwaTNRcnR1US9VS0lEK1RUdy9pUW9NTmkvWjZxVXJCZXBXCkZxVUFtZ3Qwd1RIditkUEkxRGNFUndBVnUxLzN3WVBEa3JxMzZUSkVFZFd4RnZra0hwUW9kU3htclc5b2JmWmMKcnBQU1B3Z292WUxmNjFhcHJvZXYxS1c1NjhSTjhtK2dGQzVmY0RyTFppaUFKdVRuUjZ5R2Q0ZEFkRTVMTGZqbAp1cE9pdmpieXdIWUswMTdnWmlHSGVQM3o1MHcrWmNlQWM5RmZTdFBoQW9JQkFHeDA5djVJK3MzZEZFcTJUMU9GCkg3OVRGN0s3MmpSTHM0WkFWcHByNWhJMkJjNHJlZi9ZY3dMZVJyZDJpQmJ0cWJBQ2FiMmc4TkdIcldSVkl4MFIKcTlFMTdsbGt1WXE5bXlWK0JpYk42dzVBbU14L0MzM0F3VWU2Vms5RDh3aXJGS1IyeXVaRmd6VDl6VVZ1NURQWgpUWm42aHNxQmo2RHk2UE91dGRtTndCZ29VditNYzA3eUJVTDRYTjJnVTNMK3phdGpkdEVTWkJONmxmMi9KNFBvClZOelVMM1J0clpxVGwvTzJIQlhaRGhyL2tLUVVpVVdEazZvWXpNRXVqVVVqZHg4R25uM2ZjT2xlWm5KTXFjL3QKNGdGREMvWDNScmV3WXBFU3VieE9hZlQxYmNSMG4zV0VGZ0toZyt4dkJ1WUhzd0dXZ1RTaGllcm5vT0h4NEtKaworaXNDZ2dFQWFCSW1DQ0pEVElYV0J6RmZBSHFxNTBGeVFrOGlqSjlKZndYbE4wb2ZqZFBpbFJleU5qaWdWcEcyCnFQKzh6bEJ6QWpxcG4zbnEwQmJVcy9DZjdVT2VwYW5qNVJWellQSmlteGhFMUEwMTBDNHpEOTJES2dsQXRmb0QKSW5ENDVUMytBakhiUGNRVkI0YkJWSm1Ed1daL3pTUktuSVE4Qkc1eGZhZ09teGgxbFJWWndGRTFLUCtpNmNaZgpFa2puZXBHRllrYTR3Um9sSVVvV3BJTUVVRFF0RUVyMG5UOU81T1dqOTQwUkVIdWU4Tk9Qcis4N1pYcWxwa2ZvClA4OTFMdW1Mdzh1S1pDOWRFUmxCWkZQWXY1WWFndTRYNU5mVGxrR1djZmRDR01QSWZVS2piSDhZelBCdnFja2cKbDRqSVVjQktQbWYxdlNxN01pRDlhdzZDandUOUdRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
---
# PS C:\Users\Administrator.DEMO\repo\registry> kubectl create secret generic auth-secret --from-file=htpasswd --dry-run=client -o yaml

apiVersion: v1
kind: Secret
metadata:
  name: auth-secret
  namespace: registry
data:
  htpasswd: YWRtaW46JDJ5JDA1JDBGd0U5ZUhsRzdOeGliZXNjTnh6RXVXNDdoMFM2eFpmSnk3bWZ6bloua08wSlNqUmU0Z3lHCgo=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: registry
  labels:
    app: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry
  strategy: {}
  template:
    metadata:
      labels:
        app: registry
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      affinity:
        nodeAffinity: 
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values: 
                - "kubmas2.demo.netapp.com" #run on master of the 4-node cluster
      containers:
      - name: registry
        image: registry:2.6.2
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        volumeMounts:
        - name: repo-vol
          mountPath: "/var/lib/registry"
        - name: certs-vol
          mountPath: "/certs"
          readOnly: true
        - name: auth-vol
          mountPath: "/auth"
          readOnly: true
        env:
        - name: REGISTRY_AUTH
          value: "htpasswd"
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: "Registry Realm"
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: "/auth/htpasswd"
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: "/certs/tls.crt"
        - name: REGISTRY_HTTP_TLS_KEY
          value: "/certs/tls.key"
      volumes:
      - name: repo-vol
        hostPath:
          path: "/acc-registry"
      - name: certs-vol
        secret:
          secretName: certs-secret
      - name: auth-vol
        secret:
          secretName: auth-secret
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: registry
spec:
  type: NodePort
  selector:
    app: registry
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 30001
---
apiVersion: v1
kind: Namespace
metadata:
  name: metallb-system
  labels:
    app: metallb
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  labels:
    app: metallb
  name: controller
spec:
  allowPrivilegeEscalation: false
  allowedCapabilities: []
  allowedHostPaths: []
  defaultAddCapabilities: []
  defaultAllowPrivilegeEscalation: false
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - configMap
  - secret
  - emptyDir
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  labels:
    app: metallb
  name: speaker
spec:
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - NET_RAW
  allowedHostPaths: []
  defaultAddCapabilities: []
  defaultAllowPrivilegeEscalation: false
  fsGroup:
    rule: RunAsAny
  hostIPC: false
  hostNetwork: true
  hostPID: false
  hostPorts:
  - max: 7472
    min: 7472
  - max: 7946
    min: 7946
  privileged: true
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - configMap
  - secret
  - emptyDir
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: metallb
  name: controller
  namespace: metallb-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: metallb
  name: speaker
  namespace: metallb-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: metallb
  name: metallb-system:controller
rules:
- apiGroups:
  - ''
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - services/status
  verbs:
  - update
- apiGroups:
  - ''
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - policy
  resourceNames:
  - controller
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: metallb
  name: metallb-system:speaker
rules:
- apiGroups:
  - ''
  resources:
  - services
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups: ["discovery.k8s.io"]
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - policy
  resourceNames:
  - speaker
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: metallb
  name: config-watcher
  namespace: metallb-system
rules:
- apiGroups:
  - ''
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: metallb
  name: pod-lister
  namespace: metallb-system
rules:
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: metallb
  name: controller
  namespace: metallb-system
rules:
- apiGroups:
  - ''
  resources:
  - secrets
  verbs:
  - create
- apiGroups:
  - ''
  resources:
  - secrets
  resourceNames:
  - memberlist
  verbs:
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  resourceNames:
  - controller
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: metallb
  name: metallb-system:controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metallb-system:controller
subjects:
- kind: ServiceAccount
  name: controller
  namespace: metallb-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: metallb
  name: metallb-system:speaker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metallb-system:speaker
subjects:
- kind: ServiceAccount
  name: speaker
  namespace: metallb-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: metallb
  name: config-watcher
  namespace: metallb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: config-watcher
subjects:
- kind: ServiceAccount
  name: controller
- kind: ServiceAccount
  name: speaker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: metallb
  name: pod-lister
  namespace: metallb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pod-lister
subjects:
- kind: ServiceAccount
  name: speaker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: metallb
  name: controller
  namespace: metallb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: controller
subjects:
- kind: ServiceAccount
  name: controller
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: metallb
    component: speaker
  name: speaker
  namespace: metallb-system
spec:
  selector:
    matchLabels:
      app: metallb
      component: speaker
  template:
    metadata:
      annotations:
        prometheus.io/port: '7472'
        prometheus.io/scrape: 'true'
      labels:
        app: metallb
        component: speaker
    spec:
      containers:
      - args:
        - --port=7472
        - --config=config
        - --log-level=info
        env:
        - name: METALLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: METALLB_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: METALLB_ML_BIND_ADDR
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # needed when another software is also using memberlist / port 7946
        # when changing this default you also need to update the container ports definition
        # and the PodSecurityPolicy hostPorts definition
        #- name: METALLB_ML_BIND_PORT
        #  value: "7946"
        - name: METALLB_ML_LABELS
          value: "app=metallb,component=speaker"
        - name: METALLB_ML_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: memberlist
              key: secretkey
        image: quay.io/metallb/speaker:v0.12.1
        name: speaker
        ports:
        - containerPort: 7472
          name: monitoring
        - containerPort: 7946
          name: memberlist-tcp
        - containerPort: 7946
          name: memberlist-udp
          protocol: UDP
        livenessProbe:
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_RAW
            drop:
            - ALL
          readOnlyRootFilesystem: true
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: speaker
      terminationGracePeriodSeconds: 2
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: metallb
    component: controller
  name: controller
  namespace: metallb-system
spec:
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: metallb
      component: controller
  template:
    metadata:
      annotations:
        prometheus.io/port: '7472'
        prometheus.io/scrape: 'true'
      labels:
        app: metallb
        component: controller
    spec:
      containers:
      - args:
        - --port=7472
        - --config=config
        - --log-level=info
        env:
        - name: METALLB_ML_SECRET_NAME
          value: memberlist
        - name: METALLB_DEPLOYMENT
          value: controller
        image: quay.io/metallb/controller:v0.12.1
        name: controller
        ports:
        - containerPort: 7472
          name: monitoring
        livenessProbe:
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: monitoring
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: controller
      terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.0.240-192.168.0.244